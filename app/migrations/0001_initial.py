# Generated by Django 2.2.28 on 2023-12-15 19:26

import app.models.app
import app.models.conference
import app.models.connection
import app.models.session
import app.models.summary
import app.models.track
import datetime
import dirtyfields.dirtyfields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('last_active', models.DateField(blank=True, default=datetime.datetime.utcnow, null=True)),
                ('billing', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('notifications', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('max_usage', models.PositiveIntegerField(blank=True, default=6000000)),
                ('usage', models.PositiveIntegerField(blank=True, default=0)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, verbose_name='name for this app')),
                ('api_key', models.CharField(max_length=32, unique=True)),
                ('domain', models.CharField(blank=True, max_length=256, null=True, validators=[app.models.app.validate_domain])),
                ('interval', models.IntegerField(default=10000)),
                ('recording', models.BooleanField(default=True)),
                ('durations_days', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'app',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('conference_id', models.CharField(db_index=True, max_length=64)),
                ('conference_name', models.CharField(blank=True, max_length=64, null=True)),
                ('conference_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=app.models.conference.Conference.get_default_info, null=True)),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('call_start', models.DateTimeField(blank=True, default=None, null=True)),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('ongoing', models.BooleanField(default=False)),
                ('duration', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conferences', to='app.App')),
            ],
            options={
                'db_table': 'conference',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, choices=[('h', 'host'), ('s', 'srflx'), ('p', 'prflx'), ('r', 'relay')], max_length=1, null=True)),
                ('state', models.CharField(default='new', max_length=32)),
                ('connection_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=app.models.connection.Connection.get_default_info, null=True)),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('duration', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='app.Conference')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GenericEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('category', models.CharField(choices=[('B', 'browser'), ('M', 'getUserMedia'), ('C', 'connection'), ('T', 'track'), ('S', 'stats')], max_length=1)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.App')),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.Conference')),
                ('connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.Connection')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('participant_id', models.CharField(db_index=True, max_length=64)),
                ('participant_name', models.CharField(blank=True, max_length=64, null=True)),
                ('is_sfu', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='app.App')),
                ('conferences', models.ManyToManyField(blank=True, default=None, related_name='participants', to='app.Conference')),
            ],
            options={
                'db_table': 'participant',
                'unique_together': {('participant_id', 'app')},
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('constraints', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('devices', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('platform', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('geo_ip', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('app_version', models.CharField(blank=True, max_length=16, null=True)),
                ('webrtc_sdk', models.CharField(blank=True, max_length=16, null=True)),
                ('billed_time', models.PositiveIntegerField(default=0)),
                ('session_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=app.models.session.Session.get_default_info, null=True)),
                ('duration', models.PositiveIntegerField(default=0)),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('billing_start', models.DateTimeField(blank=True, default=None, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='app.Conference')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='app.Participant')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('kind', models.CharField(choices=[('v', 'video'), ('a', 'audio')], max_length=1)),
                ('direction', models.CharField(choices=[('i', 'inbound'), ('o', 'outbound')], max_length=1)),
                ('track_id', models.CharField(db_index=True, max_length=40)),
                ('label', models.CharField(blank=True, max_length=128, null=True)),
                ('track_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=app.models.track.Track.get_default_info, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='app.Connection')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='app.Session')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=32)),
                ('usage', models.CharField(max_length=32)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('expiration_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tokens',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('o', 'ongoing'), ('d', 'done'), ('e', 'error')], default='o', max_length=1)),
                ('version', models.PositiveIntegerField(default=1)),
                ('end_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=app.models.summary.Summary.get_default_data, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('conference', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='summary', to='app.Conference')),
            ],
            options={
                'db_table': 'summary',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('subscription_id', models.CharField(blank=True, max_length=64, null=True)),
                ('subscription_item_id', models.CharField(blank=True, max_length=64, null=True)),
                ('customer_id', models.CharField(blank=True, max_length=64, null=True)),
                ('has_card_attached', models.BooleanField(default=False)),
                ('plan_id', models.CharField(default=None, max_length=32)),
                ('price', models.DecimalField(decimal_places=2, max_digits=9)),
                ('currency', models.CharField(default='usd', max_length=3)),
                ('current_period_end', models.DateField()),
                ('current_period_start', models.DateField()),
                ('current_billing_cycle', models.IntegerField()),
                ('first_billing_date', models.DateField()),
                ('status', models.CharField(default='active', max_length=10)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('members', models.ManyToManyField(related_name='organizations', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_organizations', to=settings.AUTH_USER_MODEL, verbose_name='the user who owns this organization')),
            ],
            options={
                'db_table': 'organization',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('w', 'warning'), ('e', 'error')], max_length=1)),
                ('code', models.CharField(max_length=32)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('is_active', models.BooleanField(default=True)),
                ('conference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='app.Conference')),
                ('connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='app.Connection')),
                ('events', models.ManyToManyField(blank=True, default=None, related_name='issues', to='app.GenericEvent')),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='app.Participant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='app.Session')),
                ('track', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='app.Track')),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='genericevent',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.Participant'),
        ),
        migrations.AddField(
            model_name='genericevent',
            name='peer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_where_peer', to='app.Participant'),
        ),
        migrations.AddField(
            model_name='genericevent',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.Session'),
        ),
        migrations.AddField(
            model_name='genericevent',
            name='track',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.Track'),
        ),
        migrations.AddField(
            model_name='connection',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='app.Participant'),
        ),
        migrations.AddField(
            model_name='connection',
            name='peer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_connections', to='app.Participant'),
        ),
        migrations.AddField(
            model_name='connection',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='app.Session'),
        ),
        migrations.AddField(
            model_name='app',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apps', to='app.Organization', verbose_name='the organization that owns this app'),
        ),
    ]
